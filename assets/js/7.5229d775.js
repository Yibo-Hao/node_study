(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{354:function(a,t,v){a.exports=v.p+"assets/img/download.7585ec12.png"},373:function(a,t,v){"use strict";v.r(t);var r=v(42),s=Object(r.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"第五章-node-js-认识-v8-引擎（基础知识扩展）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第五章-node-js-认识-v8-引擎（基础知识扩展）"}},[a._v("#")]),a._v(" 第五章-Node.js 认识 V8 引擎（基础知识扩展）")]),a._v(" "),r("h2",{attrs:{id:"编译型语言和解释型语言"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#编译型语言和解释型语言"}},[a._v("#")]),a._v(" 编译型语言和解释型语言")]),a._v(" "),r("p",[a._v("编程语言分为编译型语言和解释型语言两类，编译型语言在执行之前要先进行完全编译，而解释型语言一边编译一边执行，很明显解释型语言的执行速度是慢于编译型语言的，而JavaScript就是一种解释型脚本语言，支持动态类型、弱类型、基于原型的语言，内置支持类型。鉴于JavaScript都是在前端执行，而且需要及时响应用户，这就要求JavaScript可以快速的解析及执行。")]),a._v(" "),r("h2",{attrs:{id:"js特点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#js特点"}},[a._v("#")]),a._v(" js特点")]),a._v(" "),r("ul",[r("li",[a._v("解释型")]),a._v(" "),r("li",[a._v("弱类型")]),a._v(" "),r("li",[a._v("动态类型")]),a._v(" "),r("li",[a._v("基于原型")])]),a._v(" "),r("h2",{attrs:{id:"js引擎"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#js引擎"}},[a._v("#")]),a._v(" js引擎")]),a._v(" "),r("p",[r("img",{attrs:{src:v(354),alt:""}}),a._v("\nJavaScript本质上是一种解释型语言，与编译型语言不同的是它需要一遍执行一边解析，而编译型语言在执行时已经完成编译，可直接执行，有更快的执行速度(如上图所示)。")]),a._v(" "),r("p",[a._v("JavaScript语言是解释型语言，为了提高性能，引入了Java虚拟机和C++编译器中的众多技术。现在JavaScript引擎的执行过程大致是：")]),a._v(" "),r("p",[a._v("源代码-→抽象语法树-→字节码-→JIT-→本地代码(V8引擎没有中间字节码)。")]),a._v(" "),r("h2",{attrs:{id:"动态类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#动态类型"}},[a._v("#")]),a._v(" 动态类型")]),a._v(" "),r("p",[a._v("JavaScript是一种动态类型语言，在编译时并不能准确知道变量的类型，只可以在运行时确定，这就不像c++或者java等静态类型语言，在编译时候就可以确切知道变量的类型。然而，在运行时计算和决定类型，会严重影响语言性能，这也就是JavaScript运行效率比C++或者JAVA低很多的原因之一。")]),a._v(" "),r("p",[a._v("在C++中，源代码需要经过编译才能执行，在生成本地代码的过程中，变量的地址和类型已经确定，运行本地代码时利用数组和位移就可以存取变量和方法的地址，不需要再进行额外的查找，几个机器指令即可完成，节省了确定类型和地址的时间。")]),a._v(" "),r("p",[a._v("由于JavaScript是无类型语言，那就不能像c++那样在执行时已经知道变量的类型和地址，需要临时确定。JavaScript 和C++有以下几个区别：")]),a._v(" "),r("ul",[r("li",[a._v("编译确定位置，C++编译阶段确定位置偏移信息，在执行时直接存取，JavaScript在执行阶段确定，而且执行期间可以修改对象属性；")]),a._v(" "),r("li",[a._v("偏移信息共享，C++有类型定义，执行时不能动态改变，可共享偏移信息，JavaScript每个对象都是自描述，属性和位置偏移信息都包含在自身的结构中；")]),a._v(" "),r("li",[a._v("偏移信息查找，C++查找偏移地址很简单，在编译代码阶段，对使用的某类型成员变量直接设置偏移位置，JavaScript中使用一个对象，需要通过属性名匹配才能找到相应的值，需要更多的操作。")])]),a._v(" "),r("h2",{attrs:{id:"句柄-handler"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#句柄-handler"}},[a._v("#")]),a._v(" 句柄 handler")]),a._v(" "),r("p",[a._v("在V8中，数据的内部表示由数据的实际内容和数据的句柄构成。数据的实际内容是变长的，类型也是不同的；句柄固定大小，包含指向数据的指针。这种设计可以方便V8进行垃圾回收和移动数据内容，如果直接使用指针的话就会出问题或者需要更大的开销，使用句柄的话，只需修改句柄中的指针即可，使用者使用的还是句柄，指针改动是对使用者透明的。")]),a._v(" "),r("h2",{attrs:{id:"工作过程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#工作过程"}},[a._v("#")]),a._v(" 工作过程")]),a._v(" "),r("p",[a._v("V8引擎在执行JavaScript的过程中，主要有两个阶段：编译和运行，与C++的执行前完全编译不同的是，JavaScript需要在用户使用时完成编译和执行。")]),a._v(" "),r("p",[a._v("在V8中，JavaScript相关代码并非一下完成编译的，而是在某些代码需要执行时，才会进行编译，这就提高了响应时间，减少了时间开销。")]),a._v(" "),r("p",[a._v("在V8引擎中，源代码先被解析器转变为抽象语法树(AST)，然后使用JIT编译器的全代码生成器从AST直接生成本地可执行代码。这个过程不同于JAVA先生成字节码或中间表示，减少了AST到字节码的转换时间，提高了代码的执行速度。但由于缺少了转换为字节码这一中间过程，也就减少了优化代码的机会。")])])}),[],!1,null,null,null);t.default=s.exports}}]);